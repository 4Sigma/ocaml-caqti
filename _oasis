OASISFormat: 0.4
Name: ocaml-caqti
Version: 0.2.2
Synopsis: Cooperative-threaded access to relational data
Authors: Petter A. Urkedal
License: LGPL-3 with OCaml linking exception
Plugins: DevFiles (0.4), META (0.4)
BuildTools: ocamlbuild
AlphaFeatures: pure_interface
BetaFeatures: section_object

Flag async
  Description: build async concurrency support
  Default: true

Flag lwt
  Description: build lwt concurrency support
  Default: true

Flag postgresql
  Description: build the postgresql backend
  Default: true

Flag sqlite3
  Description: build the postgresql backend
  Default: true

Library caqti
  Path: lib
  InternalModules: Caqti_heap, Caqti_prereq
  Modules:
    Caqti,
    Caqti_describe,
    Caqti_metadata,
    Caqti_plugin,
    Caqti_pool,
    Caqti_sigs,
    Caqti_sql_utils,
    Caqti_query
  BuildDepends: calendar, dynlink, findlib, uri

Library caqti_async
  Path: lib-async
  Modules: Caqti_async
  FindlibParent: caqti
  FindlibName: async
  BuildDepends: caqti, core, async
  ByteOpt: -thread
  NativeOpt: -thread
  Build$: flag(async)
  Install$: flag(async)

Library caqti_lwt
  Path: lib-lwt
  Modules: Caqti_lwt
  FindlibParent: caqti
  FindlibName: lwt
  BuildDepends: caqti, lwt, lwt.preemptive
  ByteOpt: -thread
  NativeOpt: -thread
  Build$: flag(lwt)
  Install$: flag(lwt)

Library caqtus_postgresql
  Path: lib
  Modules: Caqtus_postgresql
  FindlibParent: caqti
  FindlibName: caqtus-postgresql
  BuildDepends: calendar, postgresql, uri
  ByteOpt: -thread -linkall
  NativeOpt: -thread
  Build$: flag(postgresql)
  Install$: flag(postgresql)

Library caqtus_sqlite3
  Path: lib
  Modules: Caqtus_sqlite3
  FindlibParent: caqti
  FindlibName: caqtus-sqlite3
  BuildDepends: calendar, sqlite3, uri
  ByteOpt: -thread -linkall
  NativeOpt: -thread
  Build$: flag(sqlite3)
  Install$: flag(sqlite3)

Executable test_heap
  Path: tests
  MainIs: test_heap.ml
  BuildDepends: caqti
  CompiledObject: best
  Install: false
Test test_heap
  Type: Custom (0.3)
  Command: $test_heap

Executable test_pool_lwt
  Path: tests
  MainIs: test_pool_lwt.ml
  BuildDepends: caqti, caqti.lwt
  ByteOpt: -thread
  NativeOpt: -thread
  CompiledObject: best
  Build$: flag(lwt)
  Install: false
Test test_pool_lwt
  Type: Custom (0.3)
  Command: OCAMLPATH=tests $test_pool_lwt
  Run$: flag(lwt)

Executable test_sql_lwt
  Path: tests
  MainIs: test_sql_lwt.ml
  BuildDepends: caqti.lwt
  ByteOpt: -thread
  NativeOpt: -thread
  CompiledObject: best
  Build$: flag(lwt)
  Install: false
Test test_sql_lwt
  Type: Custom (0.3)
  Command: OCAMLPATH=tests $test_sql_lwt
  Run$: flag(lwt)

Executable test_sql_async
  Path: tests
  MainIs: test_sql_async.ml
  BuildDepends: caqti.async
  ByteOpt: -thread
  NativeOpt: -thread
  CompiledObject: best
  Build$: flag(async)
  Install: false
Test test_sql_async
  Type: Custom (0.3)
  Command: OCAMLPATH=tests $test_sql_async
  Run$: flag(async)

Executable bikereg
  Path: examples
  MainIs: bikereg.ml
  BuildDepends: caqti.lwt, lwt, lwt.syntax
  ByteOpt: -thread
  NativeOpt: -thread
  CompiledObject: best
  Build$: flag(lwt)
  Install: false
Test bikereg
  Type: Custom (0.4)
  Command: OCAMLPATH=tests $bikereg
  Run$: flag(lwt)

Document api
  Title: Monadic database abstraction
  Type: ocamlbuild (0.4)
  InstallDir: $htmldir/html
  BuildTools+: ocamldoc
  XOCamlbuildPath: lib
  XOCamlbuildLibraries: caqti
  DataFiles: COPYING ($docdir), COPYING.LESSER ($docdir)

Executable "caqtiq"
  Path: bin
  MainIs: query.ml
  BuildDepends: lwt, lwt.unix, caqti.lwt
  ByteOpt: -thread
  NativeOpt: -thread
  CompiledObject: best
  Build$: flag(lwt)
  Install$: flag(lwt)
